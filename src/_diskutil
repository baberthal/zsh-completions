#compdef diskutil
# ==============================================================================
# Copyright Â© 2016 J. Morgan Lieberthal

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
# OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# ==============================================================================
#
# DESCRIPTION
# -----------
#  Completion script for diskutil
#
# ==============================================================================
#
# Authors
# -------
#  * J. Morgan Lieberthal <morgan@jmorgan.org>
#
# ==============================================================================

_diskutil() {
  local context state line curcontext="$curcontext" ret=1
  _arguments -C \
    '1: :->cmds' \
    '*:: :->args' && ret=0

  case $state in
    cmds)
      _values "diskutil verb" \
        "list[List the partitions of a disk]" \
        "info[Get information on a specific disk or partition]" \
        "information[Get information on a specific disk or partition]" \
        "listFilesystems[List file systems available for formatting]" \
        "activity[Continuous log of system-wide disk arbitration]" \
        "unmount[Unmount a single volume]" \
        "umount[Unmount a single volume]" \
        "unmountDisk[Unmount an entire disk (all volumes)]" \
        "eject[Eject a disk]" \
        "mount[Mount a single volume]" \
        "mountDisk[Mount an entire disk (all mountable volumes)]" \
        "enableJournal[Enable HFS+ journaling on a mounted HFS+ volume]" \
        "disableJournal[Disable HFS+ journaling on a mounted HFS+ volume]" \
        "moveJournal[Move the HFS+ journal onto another volume]" \
        "enableOwnership[Treat as exact User/Group IDs for a mounted volume]" \
        "disableOwnership[Ignore on-disk User/Group IDs for a mounted volume]" \
        "rename[Rename a volume]" \
        "renameVolume[Rename a volume]" \
        "verifyVolume[Verify the file system data structures of a volume]" \
        "repairVolume[Repair the file system data structures of a volume]" \
        "verifyDisk[Verify the components of a partition map of a disk]" \
        "repairDisk[Repair the components of a partition map of a disk]" \
        "eraseDisk[Erase an existing disk, removing all volumes]" \
        "eraseVolume[Erase an existing volume]" \
        "reformat[Erase an existing volume with same name and type]" \
        "eraseOptical[Erase optical media (CD/RW, DVD/RW, etc.)]" \
        "zeroDisk[Erase a disk, writing zeros to the media]" \
        "randomDisk[Erase a disk, writing random data to the media]" \
        "secureErase[Securely erase a disk or freespace on a volume]" \
        "partitionDisk[(re)Partition a disk, removing all volumes]" \
        "resizeVolume[Resize a volume, increasing or decreasing its size]" \
        "splitPartition[Split an existing partition into two or more]" \
        "mergePartitions[Combine two or more existing partitions into one]" \
        "appleRAID <verb>[Perform additional verbs related to AppleRAID]" \
        "coreStorage <verb>[Perform additional verbs related to CoreStorage]"
      ret=0
      ;;

    args)
      case $line[1] in
        list)
          _arguments \
            '(-plist)-plist[emit a property list instead of normal human-readable output]'
          ;;
        info*|unmount*|umount|mount*)
          _path_files
          ;;
      esac
      ;;
  esac
}

_diskutil

#  vim: set ts=2 sw=2 tw=0 ft=zsh et :
